select(Comp.1, Comp.2) %>%
mutate(
Author = fed$Author
)
head(fed_pc_scores)
fed <- read.csv('../../week9/federalist.txt')
fed_pca <-
fed %>%
select(-Author) %>%
princomp()
# variances
tibble(
pcs = 0:70,
variance = fed_pca$sdev^2
) %>%
ggplot(aes(x = pcs, y = variance)) +
geom_col()
# var plot
fed_pc_scores <-
fed_pca$scores %>%
as_tibble() %>%
select(Comp.1, Comp.2) %>%
mutate(
Author = fed$Author
)
head(fed_pc_scores)
kmeans(fed_pc_scores, centers = 3)
?kmeans(centers = 3)
# variances
tibble(
pcs = 1:71,
variance = fed_pca$sdev^2
) %>%
ggplot(aes(x = pcs, y = variance)) +
geom_col()
# var plot
fed_pc_scores <-
fed_pca$scores %>%
as_tibble() %>%
select(Comp.1, Comp.2) %>%
mutate(
Author = fed$Author
)
View(fed_pc_scores)
fed <- read.csv('../../week9/federalist.txt')
fed_pca <-
fed %>%
select(-Author) %>%
princomp()
# variances
tibble(
pcs = 0:70,
variance = fed_pca$sdev^2
) %>%
ggplot(aes(x = pcs, y = variance)) +
geom_col()
# var plot
fed_pc_scores <-
fed_pca$scores %>%
as_tibble() %>%
select(Comp.1, Comp.2) %>%
mutate(
Author = fed$Author
)
head(fed_pc_scores)
View(fed_pca)
fed_pca[["scores"]]
# Load required packages
library(shiny)
# Load required packages
library(shiny)
library(tidyverse)
library(lubridate)
library(DT)
library(ggiraph)
library(shinyWidgets)
library(scales)
library(leaflet)
#Data import
school_covid <-
read.csv(here::here("School_Learning_Modalities__2020-2021.csv"))
states <-
geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
states$name <-
usdata::state2abbr(states$name)
# Define UI for Shiny app
ui <- navbarPage(
"School Learning Modalities, 2020-2021",
tabPanel(
"Weeks",
titlePanel("Change in Modality by State"),
sidebarLayout(
sidebarPanel(
selectInput(
"week_state",
"State:",
choices = unique(school_covid$state),
selected = "CA"
),
# Date slider input
sliderInput(
"daterange",
"Select Date Range:",
min = as.Date("2020-09-06"),
max = as.Date("2021-05-30"),
value = c(as.Date("2020-09-06"),
as.Date("2021-05-30")),
step = 7,
animate = FALSE
),
hr(),
# Checkbox inputs for Y variables
checkboxGroupInput(
"mode",
"Select Learning Modality:",
choices = c("Remote", "Hybrid", "In Person"),
selected = c("Remote", "Hybrid", "In Person")
)
),
mainPanel(# Line graph output
plotOutput("linegraph"))
)
),
tabPanel("Percentages",
sidebarLayout(
sidebarPanel(
selectInput(
"percentages_week",
"Week:",
choices = unique(school_covid$week),
selected = "05/30/2021 12:00:00 AM"
)
),
mainPanel(
dataTableOutput("percentages_table"),
hr(),
plotOutput("percentages_bar")
)
)),
tabPanel("District Size",
sidebarLayout(
sidebarPanel(
prettySwitch("district_size_lm",
"Linear model",
TRUE),
selectInput(
"district_size_week",
"Week:",
choices = unique(school_covid$week),
selected = "05/30/2021 12:00:00 AM"
),
pickerInput(
"district_size_state",
"States:",
choices = unique(school_covid$state),
selected = unique(school_covid$state),
options = pickerOptions(actionsBox = TRUE),
multiple = TRUE
),
sliderInput(
"district_size_schools",
"Number of operational schools:",
min = 0,
max = 1000,
value = c(0, 1000),
step = 100
),
sliderInput(
"district_size_students",
"Number of students:",
min = 0,
max = 500000,
value = c(0, 500000),
step = 50000
),
checkboxGroupInput(
"district_size_modality",
"Learning Modality:",
choices = c("Remote", "Hybrid", "In Person"),
selected = c("Remote", "Hybrid", "In Person")
)
),
mainPanel(girafeOutput("district_size_scatter"))
)),
tabPanel("Choropleth",
sidebarLayout(
sidebarPanel(
selectInput("choro", "Select Learning Modality:",
choices = c("Remote", "Hybrid", "In-Person"),
selected = c("Remote")
)
),
mainPanel("Choropleth", leafletOutput("map"))
))
)
# Define server for Shiny app
server <- function(input, output) {
# Filter data by week range and y variables
state_week_data <- reactive({
school_covid |>
filter(state == input$week_state) |>
select(week:learning_modality) |>
mutate(date = mdy_hms(week)) |>
filter(
date >= input$daterange[1] & date <= input$daterange[2],
learning_modality %in% input$mode
) |>
mutate(week2 = floor_date(date, "week")) |>
group_by(week2, learning_modality) |>
summarise(n = n()) |>
ungroup()
})
#Making line graph
output$linegraph <- renderPlot({
ggplot(
state_week_data(),
aes(
x = week2,
y = n,
color = learning_modality,
group = learning_modality
)
) +
geom_line() +
labs(
title = "Modes Over Time by Week",
x = "",
y = "Number of Districts",
color = "Modalilty"
) +
theme_minimal()
})
data_week <- reactive({
school_covid %>%
filter(week == input$percentages_week)
})
#Reactive data for the table
data_state <- reactive({
data_week() |>
filter(state != "BI") |>
group_by(state) |>
mutate(
remote = sum(learning_modality == "Remote"),
in_person = sum(learning_modality == "In Person"),
hybrid = sum(learning_modality == "Hybrid"),
total = in_person + hybrid + remote,
districts = total
) |>
distinct(state, .keep_all = TRUE) |>
mutate(
remote_percentage = round(remote / total * 100, digits = 2),
in_person_percentage = round(in_person / total * 100, digits = 2),
hybrid_percentage = round(hybrid / total * 100, digits = 2)
) |>
select(
state,
districts,
in_person,
hybrid,
remote,
in_person_percentage,
hybrid_percentage,
remote_percentage
) |>
rename(
"State" = "state",
"Districts" = "districts",
"In-Person" = "in_person",
"Hybrid" = "hybrid",
"Remote" = "remote",
"In-Person %" = "in_person_percentage",
"Hybrid %" = "hybrid_percentage",
"Remote %" = "remote_percentage"
) |>
arrange(desc("Students"))
})
output$percentages_table <- DT::renderDataTable(data_state())
#Percentage bar for bottom of table
output$percentages_bar <-
renderPlot(
ggplot(data_week(), aes(y = state)) +
geom_bar(aes(fill = learning_modality)) +
scale_y_discrete(limits = rev) +
labs(
title = "School Districts by State",
x = "Number of School Districts",
y = "State",
fill = "Modality"
) +
theme_minimal(),
width = 400,
height = 600
)
#Reactive data for scatter plot/linear model of district size
district_data <- reactive({
school_covid %>%
filter(week == input$district_size_week) %>%
filter(state %in% input$district_size_state) %>%
filter(
operational_schools >= input$district_size_schools[1]
& operational_schools <= input$district_size_schools[2]
) %>%
filter(
student_count >= input$district_size_students[1]
& student_count <= input$district_size_students[2]
) %>%
filter(learning_modality %in% input$district_size_modality)
})
smooth_linetype <-
reactive(if_else(isTRUE(input$district_size_lm), "solid", "blank"))
#GGplot for district size scatterplot
output$district_size_scatter <-
renderGirafe(
girafe(
ggobj = ggplot(
data = district_data(),
aes(x = operational_schools,
y = student_count,
color = learning_modality)
) +
geom_point_interactive(aes(
alpha = 0.5,
tooltip = str_c(district_name, " - ",
str_c(str_c(city, ", ", state), " ", zip_code))
), size = 3.5) +
geom_smooth_interactive(
method = lm,
se = FALSE,
linetype = smooth_linetype()
) +
scale_y_continuous(labels = comma) +
labs(
title = "Districts by Number of Schools and Students",
x = "Operational Schools",
y = "Student Count",
color = "Modality"
) +
guides(alpha = "none") +
theme_minimal(),
width_svg = 8,
height_svg = 6,
options = list(opts_toolbar(saveaspng = FALSE),
opts_zoom(min = 1, max = 5))
)
)
#Choropleth
#State percent
data_percent <- school_covid |>
group_by(state) |>
filter(state != "BI") |>
mutate(remote = sum(learning_modality == "Remote"),
in_person = sum(learning_modality == "In Person"),
hybrid = sum(learning_modality == "Hybrid"),
operational_schools = sum(operational_schools),
total = in_person + hybrid + remote) |>
distinct(state, .keep_all = TRUE) |>
mutate(remote = round(remote/total*100, digits=2),
in_person = round(in_person/total*100, digits=2),
hybrid = round(hybrid/total*100, digits=2)) |>
select(state, operational_schools, in_person, hybrid, remote) |>
rename("State" = "state",
"In-Person" = "in_person",
"Hybrid" = "hybrid",
"Remote" = "remote",
"Schools" = "operational_schools") |>
arrange(desc("Students")) |>
pivot_longer(`In-Person`:`Remote`,names_to = "learning_modality", values_to = "percent")
#Merging GeoJSON and Data
states_merged <- sp::merge(states, data_percent, by.x = "name", by.y = "State", all.x = FALSE, duplicateGeoms = TRUE)
#Map Data reactive
map_data <- reactive({
subset(states_merged,
learning_modality %in% c(input$choro))
})
#Color function
pal <- colorNumeric("YlGnBu", NULL)
output$map <- renderLeaflet({
leaflet(map_data()) %>%
addTiles() %>%
setView(-98.483330, 38.712046, zoom = 4)
})
observe({
#Label for each state
labels <- sprintf(
"<strong>%s</strong><br/>%g",
map_data()$name,
map_data()$percent
) %>% lapply(htmltools::HTML)
leafletProxy("map", data = map_data()) %>%
clearShapes() %>%
addPolygons(fillColor = ~pal(percent),
fillOpacity = 0.7,
weight = 1,
popup = labels,
highlightOptions = highlightOptions(
weight = 1,
color = "white",
fillOpacity = 0.7,
bringToFront = TRUE)
) %>%
addLegend(pal = pal, values = ~percent, opacity = 0.7, title = "Percentage of Modality",
position = "bottomright")
})
}
# Run Shiny app
shinyApp(ui = ui, server = server)
# Load required packages
library(shiny)
library(tidyverse)
library(lubridate)
library(DT)
library(ggiraph)
library(shinyWidgets)
library(scales)
library(leaflet)
#Data import
school_covid <-
read.csv(here::here("School_Learning_Modalities__2020-2021.csv"))
getwd()
library(testthat)
library(clust431)
library(testthat)
library(clust431)
devtools::load_all(".")
library(clust431)
library(testthat)
library(clust431)
test_check("clust431")
test_that("hier_clust() works", {
fed <- read.csv("federalist.txt")
fed_hc <- hier_clust(fed, k = 10)
expect_equal(10,
length(unique(fed_hc)))
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
# Test case 1: Check if the function returns the correct number of clusters
test_that("The function returns the correct number of clusters", {
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
# Check if the number of clusters is equal to k
expect_equal(length(result$cluster_means), 2)
})
# Test case 1: Check if the function returns the correct number of clusters
test_that("The function returns the correct number of clusters", {
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
# Check if the number of clusters is equal to k
expect_equal(length(result$cluster_means), 2)
})
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
plot(df$x, df$y)
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
library(clust431)
devtools::load_all(".")
# Test case 1: Check if the function returns the correct number of clusters
test_that("The function returns the correct number of clusters", {
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
# Check if the number of clusters is equal to k
expect_equal(length(result$cluster_means), 2)
})
# Test case 2: Check if the function assigns each data point to a cluster
test_that("The function assigns each data point to a cluster", {
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
# Check if the length of clustering vector is equal to the number of data points
expect_equal(length(result$clustering_vector), nrow(df))
})
# Test case 3: Check if the function returns the correct sum of squares for each cluster
test_that("The function returns the correct sum of squares for each cluster", {
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
# Calculate the expected sum of squares manually
expected_ss <- sum((df[1:3, ] - result$cluster_means[[1]])^2) +
sum((df[4:6, ] - result$cluster_means[[2]])^2)
# Check if the sum of squares is equal to the expected value
expect_equal(result$sum_of_squares, expected_ss)
})
# Test case 3: Check if the function returns the correct sum of squares for each cluster
test_that("The function returns the correct sum of squares for each cluster", {
# Create a sample dataframe
df <- data.frame(x = c(1, 2, 3, 10, 11, 12),
y = c(1, 2, 3, 10, 11, 12))
# Perform k-means clustering with k = 2
result <- k_means(df, k = 2)
# Calculate the expected sum of squares manually
expected_ss <- sum((df[1:3, ] - result$cluster_means[[1]])^2) +
sum((df[4:6, ] - result$cluster_means[[2]])^2)
# Check if the sum of squares is equal to the expected value
expect_equal(result$sum_of_squares, expected_ss)
})
?rep
